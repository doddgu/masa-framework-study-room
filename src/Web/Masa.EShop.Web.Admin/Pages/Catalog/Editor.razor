@inject I18n I18n
@inject IPopupService PopupService

<MNavigationDrawer Temporary Fixed Right @bind-Value=_visible Width="465" Class="pa-6">
    <div class="block-between mb-12">
        <span class="text-h6">@I18n.T(_product.Id > 0 ? "Catalog.EditProduct" : "Catalog.AddProduct")</span>
        <MIcon Color="neutral-lighten-3" Size=24 OnClick="() => _visible = false">mdi-close</MIcon>
    </div>
    <MForm Model=_product EnableValidation>
        <MTextField @bind-Value="_product.Name" Class="mb-6" Label="FullName" HideDetails="@("auto")" Outlined />
        <MTextField @bind-Value="_product.PictureFileName" Class="mb-6" Label="UserName" HideDetails="@("auto")" Outlined />
        <MSelect HideDetails="@("auto")" Class="mb-6" Outlined Label="Assignee" @bind-Value=_product.CatalogTypeId
                 Items=@UserService.GetRoleList() ItemText="r => r" ItemValue="r => r">
        </MSelect>
        <MSelect HideDetails="@("auto")" Class="mb-6" Outlined Label="Assignee" @bind-Value=_product.CatalogBrandId
                 Items=@UserService.GetPlanList() ItemText="p => p" ItemValue="p => p">
        </MSelect>
        <MTextField @bind-Value="_product.Price" Class="mb-6" Label="Company" HideDetails="@("auto")" Outlined />

        <div style="bottom:48px;right:24px;position:absolute">
            <MButton MinWidth=80 Height=40 Outlined Class="text-btn rounded-pill" OnClick="() => _visible = false"> @I18n.T("Cancel") </MButton>
            <MButton MinWidth=80 Height=40 Color="primary" Class="ml-6 rounded-pill" OnClick="async ()=> await AddProductAsync(context)"> @I18n.T("Add") </MButton>
        </div>
    </MForm>
</MNavigationDrawer>

@code {
    private AddProductViewModel _product = new AddProductViewModel();
    private bool _visible = false;

    [Inject]
    private CatalogSericeCaller Caller { get; set; } = default!;

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    public async Task ShowAsync(int id)
    {
        if (id > 0)
        {
            var dto = await Caller.GetAsync(id);
            _product = dto.Map<AddProductViewModel>();
        }
        else
        {
            _product = new AddProductViewModel();
        }

        _visible = true;

        StateHasChanged();
    }

    private async Task AddProductAsync(FormContext context)
    {
        if (context.Validate())
        {
            try
            {
                await Caller.AddProductAsync(_product);
                await PopupService.AlertAsync(I18n.T("Saved"), AlertTypes.Success);

                _visible = false;
                StateHasChanged();
                
                await OnSuccess.InvokeAsync();
            }
            catch (Exception ex)
            {
                await PopupService.AlertAsync(ex);
            }
        }
    }
}
